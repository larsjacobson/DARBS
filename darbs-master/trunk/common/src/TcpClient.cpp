//////////////////////////////////////////////////////////////////////////
//
// File: TcpClient.cpp
//
//////////////////////////////////////////////////////////////////////////
//
// $Id: LnTcpServer.cpp,v 1.1 2001/04/06 15:46:33 kcpw2 Exp $
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis: 
//
// Implementation file for the TcpClient class.
// 
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/11: Joe Turner: initial implementation
//
//////////////////////////////////////////////////////////////////////////

///////////////////////////// global includes ////////////////////////////   
#include <string>
#include <iostream>
#include <boost/bind.hpp>
#include <cstdlib>

///////////////////////////// local includes /////////////////////////////
#include "TcpClient.hpp"

///////////////////////////// namespaces /////////////////////////////////

///////////////////////////// defines ////////////////////////////////////

///////////////////////////// global variables ///////////////////////////

///////////////////////////// member functions ///////////////////////////

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::TcpClient(boost::asio::io_service& ioService)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:  
//
// Constructor for the TcpClient class.
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      TcpClient(boost::asio::io_service& ioService)
//
// Where:      boost::asio::io_service& ioService: Socket IO facilitator
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/15: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
TcpClient::TcpClient(boost::asio::io_service& ioService)
    : ioService(ioService), socket(ioService), resolver(ioService) {
}
    

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::TcpClient(boost::asio::io_service& ioService, std::string host, 
//                      std::string port)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:  
//
// Constructor for the TcpClient class.  Resolves, and connects to a
// server.
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      TcpClient(boost::asio::io_service& ioService, std::string host,
//                       std::string port)
//
// Where:      boost::asio::io_service& ioService: Socket IO facilitator
//             std::string host: The host IP to connect to
//             std::string port: The port number to bind to
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
TcpClient::TcpClient(boost::asio::io_service& ioService, std::string host, std::string port) : ioService(ioService), socket(ioService), resolver(ioService) {
    connect(host, port);
    read();
}

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::~TcpClient()
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:  
//
// Destructor for TcpClient.
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
TcpClient::~TcpClient() {
    socket.close();
}

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::connect(std::string host, std::string port)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:  
//
// Connects to a given host
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      TcpClient::connect(std::string host, std::string port)
//
// Where:      std::string host: The IP address of the host
//             std::string port: The port number to connect to
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpClient::connect(std::string host, std::string port) {
    boost::asio::ip::tcp::resolver::query query(boost::asio::ip::tcp::v4(), host, port);
    boost::asio::ip::tcp::resolver::iterator it = resolver.resolve(query);
    boost::asio::ip::tcp::resolver::iterator end;
    boost::system::error_code error = boost::asio::error::host_not_found;
    while (error && it != end) {
        socket.close();
        socket.connect(*it++, error);
    }
    if (error) {
        std::cout << "Could not connect to DARBS server" << std::endl;
        exit(0);
    }
}

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::read()
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Reads from the socket until an ETB occurs
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      read()
//                                            
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpClient::read() {
    boost::asio::async_read_until(socket, data, ETB,
                                  boost::bind(&TcpClient::readHandler, this,
                                              boost::asio::placeholders::error,
                                              boost::asio::placeholders::bytes_transferred));
}


//////////////////////////////////////////////////////////////////////////
//
// TcpClient::readHandler(const boost::system::error_code& error,
//                        std::size_t transferred)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:  
//
// Callback from read() function - sends a signal if data was received,
// or if an error occurred
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      readHandler(const boost::system::error_code& error,
//                         std::size_t transferred)
//
// Where:      const boost::system::error_code& error: Error number
//             std::size_t transferred: The number of bytes transferred
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpClient::readHandler(const boost::system::error_code& error,
                            std::size_t transferred) {
    if (error) {
        std::cout << error.message() << std::endl;
        exit(0);
    }
    // Convert from streambuf to string
    std::string sData;
    std::istream isData(&data);
    std::getline(isData, sData);
    // Remove ETB character
    sData = sData.substr(0, sData.size() - 1);
    readSignal(sData, this);
    read();
}

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::write(std::string message)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Writes a string to the server
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      write(std::string message)
//
// Where:      std::string message: String to send to the server
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////

void TcpClient::write(std::string message) {
    boost::asio::async_write(socket, boost::asio::buffer(message + ETB),
                             boost::bind(&TcpClient::writeHandler, this,
                                         boost::asio::placeholders::error,
                                         boost::asio::placeholders::bytes_transferred));
}

//////////////////////////////////////////////////////////////////////////
//
// TcpClient::writeHandler(const boost::system::error_code& error,
//                         std::size_t transferred)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Callback from write() function - exits if there was an error writing
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      writeHandler(const boost::system::error_code& error,
//                          std::size_t transferred)
//
// Where:      const boost::system::error_code& error: Error number
//             std::size_t transferred: The number of bytes transferred
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/12: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpClient::writeHandler(const boost::system::error_code& error,
                             std::size_t transferred) {
    if (error) {
        std::cout << error.message() << std::endl;
        exit(0);
    }
}

