//////////////////////////////////////////////////////////////////////////
//
// File: TcpConnection.cpp
//
//////////////////////////////////////////////////////////////////////////
//
// $Id: LnTcpServer.hpp,v 1.1 2001/04/06 15:46:57 kcpw2 Exp $
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis: 
//
// Implementation file for TcpConnection
// 
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/03: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////

///////////////////////////// global includes ////////////////////////////

#include <iostream>
#include <boost/bind.hpp>

///////////////////////////// local includes /////////////////////////////

#include "TcpConnection.hpp"

///////////////////////////// namespaces /////////////////////////////////

///////////////////////////// defines ////////////////////////////////////

///////////////////////////// global variables ///////////////////////////

///////////////////////////// member functions ///////////////////////////


//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::TcpConnection(boost::asio::io_service& io_service)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Creates a new TcpConnection ready for use by a client
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      TcpConnection(boost::asio::io_service& io_service)
//
// Where:      boost::asio::io_service& io_service: Socket IO facilitator
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
TcpConnection::TcpConnection(boost::asio::io_service& io_service)
    : socket(io_service) {
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::~TcpConnection()
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Destructor
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      ~TcpConnection()
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    n/a
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////

TcpConnection::~TcpConnection() {
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::write(std::string message)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Writes a string to a client
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      write(std::string message)
//
// Where:      std::string message: String to send to the client
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////

void TcpConnection::write(std::string message) {
    boost::asio::async_write(socket, boost::asio::buffer(message + ETB),
                             boost::bind(&TcpConnection::writeHandler, this,
                                         boost::asio::placeholders::error,
                                         boost::asio::placeholders::bytes_transferred));
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::read()
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Reads from the socket until an ETB occurs
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      read()
//                                            
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpConnection::read() {
    boost::asio::async_read_until(socket, data, ETB,
                                  boost::bind(&TcpConnection::readHandler, this,
                                              boost::asio::placeholders::error,
                                              boost::asio::placeholders::bytes_transferred));
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::writeHandler(const boost::system::error_code& error,
//                             std::size_t transferred)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Callback from write() function - sends a signal if there was an error
// whilst writing
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      writeHandler(const boost::system::error_code& error,
//                          std::size_t transferred)
//
// Where:      const boost::system::error_code& error: Error number
//             std::size_t transferred: The number of bytes transferred
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpConnection::writeHandler(const boost::system::error_code& error,
                  std::size_t transferred) {
    if (error) {
        errorSignal(error, this);
    }
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::readHandler(const boost::system::error_code& error,
//                             std::size_t transferred)
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Callback from read() function - sends a signal if data was received,
// or if an error occurred
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      readHandler(const boost::system::error_code& error,
//                         std::size_t transferred)
//
// Where:      const boost::system::error_code& error: Error number
//             std::size_t transferred: The number of bytes transferred
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    void
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
void TcpConnection::readHandler(const boost::system::error_code& error,
                 std::size_t transferred) {
    if (error) {
        errorSignal(error, this);
        return;
    }
    // Convert from streambuf to string
    std::string sData;
    std::istream isData(&data);
    std::getline(isData, sData);
    // Remove ETB character
    sData = sData.substr(0, sData.size() - 1);
    readSignal(sData, this);
    read();
}

//////////////////////////////////////////////////////////////////////////
//
// TcpConnection::getSocket()
//
//////////////////////////////////////////////////////////////////////////
//
// Synopsis:
//
// Return the socket used by the connection
//
//////////////////////////////////////////////////////////////////////////
//
// Usage:      getSocket()
//
//////////////////////////////////////////////////////////////////////////
//
// Returns:    boost::asio::ip::tcp::socket&: Reference to the socket
//             used by the connection
//                
//////////////////////////////////////////////////////////////////////////
//
// Exceptions: none
//
//////////////////////////////////////////////////////////////////////////
//
// History:
//
// 2010/02/05: Joe Turner: Initial implementation
//
//////////////////////////////////////////////////////////////////////////
boost::asio::ip::tcp::socket& TcpConnection::getSocket() {
      return socket;
}

    


